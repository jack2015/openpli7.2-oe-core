diff -Naur enigma2.orig/lib/base/message.h enigma2/lib/base/message.h
--- enigma2.orig/lib/base/message.h	2017-04-18 10:35:49.964605301 +0200
+++ enigma2/lib/base/message.h	2017-04-18 10:36:06.407161050 +0200
@@ -8,7 +8,6 @@
 #include <unistd.h>
 #include <lib/base/elock.h>
 #include <lib/base/wrappers.h>
-#include <sys/eventfd.h>
 
 /**
  * \brief A generic messagepump.
@@ -31,18 +30,6 @@
 	int getOutputFD() const { return fd[0]; }
 };
 
-class FD
-{
-protected:
-	int m_fd;
-public:
-	FD(int fd): m_fd(fd) {}
-	~FD()
-	{
-		::close(m_fd);
-	}
-};
-
 /**
  * \brief A messagepump with fixed-length packets.
  *
@@ -50,32 +37,20 @@
  * Automatically creates a eSocketNotifier and gives you a callback.
  */
 template<class T>
-class eFixedMessagePump: public sigc::trackable, FD
+class eFixedMessagePump: public sigc::trackable
 {
-	eSingleLock lock;
 	ePtr<eSocketNotifier> sn;
 	std::queue<T> m_queue;
+	int m_pipe[2];
+	eSingleLock lock;
 	void do_recv(int)
 	{
-		uint64_t data;
-		if (::read(m_fd, &data, sizeof(data)) <= 0)
-		{
-			eFatal("[eFixedMessagePump] read error %m");
-			return;
-		}
+		char byte;
+		if (singleRead(m_pipe[0], &byte, sizeof(byte)) <= 0) return;
 
-		/* eventfd reads the number of writes since the last read. This
-		 * will not exceed 4G, so an unsigned int is big enough to count
-		 * down the events. */
-		for(unsigned int count = (unsigned int)data; count != 0; --count)
+		lock.lock();
+		if (!m_queue.empty())
 		{
-			lock.lock();
-			if (m_queue.empty())
-			{
-				lock.unlock();
-				eFatal("[eFixedMessagePump] Got event but queue is empty");
-				break;
-			}
 			T msg = m_queue.front();
 			m_queue.pop();
 			lock.unlock();
@@ -88,12 +63,10 @@
 			 */
 			/*emit*/ recv_msg(msg);
 		}
-	}
-	void trigger_event()
-	{
-		static const uint64_t data = 1;
-		if (::write(m_fd, &data, sizeof(data)) < 0)
-			eFatal("[eFixedMessagePump] write error %m");
+		else
+		{
+			lock.unlock();
+		}
 	}
 public:
 	sigc::signal1<void,const T&> recv_msg;
@@ -103,19 +76,20 @@
 			eSingleLocker s(lock);
 			m_queue.push(msg);
 		}
-		trigger_event();
+		char byte = 0;
+		writeAll(m_pipe[1], &byte, sizeof(byte));
 	}
-	eFixedMessagePump(eMainloop *context, int mt):
-		FD(eventfd(0, EFD_CLOEXEC)),
-		sn(eSocketNotifier::create(context, m_fd, eSocketNotifier::Read, false))
+	eFixedMessagePump(eMainloop *context, int mt)
 	{
+		pipe(m_pipe);
+		sn = eSocketNotifier::create(context, m_pipe[0], eSocketNotifier::Read, false);
 		CONNECT(sn->activated, eFixedMessagePump<T>::do_recv);
 		sn->start();
 	}
 	~eFixedMessagePump()
 	{
-		/* sn is refcounted and still referenced, so call stop() here */
-		sn->stop();
+		close(m_pipe[0]);
+		close(m_pipe[1]);
 	}
 };
 #endif
diff -Naur enigma2.orig/lib/dvb/db.cpp enigma2/lib/dvb/db.cpp
--- enigma2.orig/lib/dvb/db.cpp	 2019-03-02 22:16:19.000000000 +0200
+++ enigma2/lib/dvb/db.cpp	2019-03-03 00:13:38.000000000 +0200
@@ -40,6 +40,14 @@
 	return 0;
 }
 
+#ifndef NO_STREAM_ID_FILTER
+#define NO_STREAM_ID_FILTER    (~0U)
+#endif
+
+#ifndef DTV_STREAM_ID
+#define DTV_STREAM_ID DTV_ISDBS_TS_ID
+#endif
+
 DEFINE_REF(eDVBService);
 
 RESULT eBouquet::addService(const eServiceReference &ref, eServiceReference before)
diff -Naur enigma2.orig/lib/dvb/dvb.cpp enigma2/lib/dvb/dvb.cpp
--- enigma2.orig/lib/dvb/dvb.cpp  2019-03-02 22:16:19.000000000 +0200
+++ enigma2/lib/dvb/dvb.cpp	 2019-03-03 00:22:42.000000000 +0200
@@ -321,6 +321,7 @@
 	struct dtv_properties props;
 	struct dtv_property prop[1];
 
+#if defined DTV_ENUM_DELSYS
 	prop[0].cmd = DTV_ENUM_DELSYS;
 	memset(prop[0].u.buffer.data, 0, sizeof(prop[0].u.buffer.data));
 	prop[0].u.buffer.len = 0;
@@ -329,7 +330,7 @@
 
 	if (ioctl(frontend, FE_GET_PROPERTY, &props) < 0)
 		eDebug("[eDVBUsbAdapter] FE_GET_PROPERTY DTV_ENUM_DELSYS failed %m");
-
+#endif
 	::close(frontend);
 	frontend = -1;
 
@@ -418,8 +419,10 @@
 	ioctl(vtunerFd, VTUNER_SET_NAME, name);
 	ioctl(vtunerFd, VTUNER_SET_TYPE, type);
 	ioctl(vtunerFd, VTUNER_SET_FE_INFO, &fe_info);
+#if defined DTV_ENUM_DELSYS
 	if (prop[0].u.buffer.len > 0)
 		ioctl(vtunerFd, VTUNER_SET_DELSYS, prop[0].u.buffer.data);
+#endif
 	ioctl(vtunerFd, VTUNER_SET_HAS_OUTPUTS, "no");
 	ioctl(vtunerFd, VTUNER_SET_ADAPTER, nr);
 
@@ -750,7 +753,7 @@
 			}
 			else if (!strcmp(type, "DVB-C"))
 			{
-#if defined SYS_DVBC_ANNEX_A
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 				return i->m_frontend->supportsDeliverySystem(SYS_DVBC_ANNEX_A, false) || i->m_frontend->supportsDeliverySystem(SYS_DVBC_ANNEX_C, false);
 #else
 				return i->m_frontend->supportsDeliverySystem(SYS_DVBC_ANNEX_AC, false);
@@ -814,7 +817,7 @@
 			}
 			else if (type == "DVB-C")
 			{
-#if defined SYS_DVBC_ANNEX_A
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 				whitelist.push_back(SYS_DVBC_ANNEX_A);
 				whitelist.push_back(SYS_DVBC_ANNEX_C);
 #else
@@ -1352,8 +1355,6 @@
 						return 40000;
 					case iDVBFrontend::feTerrestrial:
 						return 30000;
-					case iDVBFrontend::feATSC:
-						return 20000;
 					default:
 						break;
 				}
diff -Naur enigma2.orig/lib/dvb/frontend.cpp enigma2/lib/dvb/frontend.cpp
--- enigma2.orig/lib/dvb/frontend.cpp	2019-03-02 22:16:19.000000000 +0200
+++ enigma2/lib/dvb/frontend.cpp	2019-03-03 00:37:25.000000000 +0200
@@ -18,6 +18,14 @@
 #define I2C_SLAVE_FORCE	0x0706
 #endif
 
+#ifndef NO_STREAM_ID_FILTER
+#define NO_STREAM_ID_FILTER    (~0U)
+#endif
+
+#ifndef DTV_STREAM_ID
+#define DTV_STREAM_ID DTV_ISDBS_TS_ID
+#endif
+
 #define eDebugNoSimulate(x...) \
 	do { \
 		if (!m_simulate) \
@@ -661,12 +669,8 @@
 					}
 					case FE_QAM:
 					{
-#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 						/* no need for a m_dvbversion check, SYS_DVBC_ANNEX_A replaced SYS_DVBC_ANNEX_AC (same value) */
 						m_delsys[SYS_DVBC_ANNEX_A] = true;
-#else
-						m_delsys[SYS_DVBC_ANNEX_AC] = true;
-#endif
 						break;
 					}
 					case FE_OFDM:
@@ -680,7 +684,7 @@
 #endif
 						break;
 					}
-					case FE_ATSC:
+					case FE_ATSC:	// placeholder to prevent warning
 					{
 						m_delsys[SYS_ATSC] = true;
 						break;
@@ -2208,23 +2212,22 @@
 			m_looptimeout = 300;
 #endif
 			p[cmdseq.num].cmd = DTV_DELIVERY_SYSTEM;
-#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 			if (m_dvbversion >= DVB_VERSION(5, 6))
 			{
 				switch (parm.system)
 				{
 					default:
 					case eDVBFrontendParametersCable::System_DVB_C_ANNEX_A: p[cmdseq.num].u.data = SYS_DVBC_ANNEX_A; break;
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 					case eDVBFrontendParametersCable::System_DVB_C_ANNEX_C: p[cmdseq.num].u.data = SYS_DVBC_ANNEX_C; break;
+#endif
 				}
 			}
 			else
 			{
 				p[cmdseq.num].u.data = SYS_DVBC_ANNEX_A; /* old value for SYS_DVBC_ANNEX_AC */
 			}
-#else
-			p[cmdseq.num].u.data = SYS_DVBC_ANNEX_AC;
-#endif
+
 			cmdseq.num++;
 
 			p[cmdseq.num].cmd = DTV_FREQUENCY, p[cmdseq.num].u.data = parm.frequency * 1000, cmdseq.num++;
@@ -2873,19 +2876,17 @@
 		{
 			return 0;
 		}
-#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 		if (m_dvbversion >= DVB_VERSION(5, 6))
 		{
 			can_handle_dvbc_annex_a = supportsDeliverySystem(SYS_DVBC_ANNEX_A, true);
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 			can_handle_dvbc_annex_c = supportsDeliverySystem(SYS_DVBC_ANNEX_C, true);
+#endif
 		}
 		else
 		{
 			can_handle_dvbc_annex_a = can_handle_dvbc_annex_c = supportsDeliverySystem(SYS_DVBC_ANNEX_A, true); /* new value for SYS_DVB_ANNEX_AC */
 		}
-#else
-		can_handle_dvbc_annex_a = can_handle_dvbc_annex_c = supportsDeliverySystem(SYS_DVBC_ANNEX_AC, true);
-#endif
 		if (parm.system == eDVBFrontendParametersCable::System_DVB_C_ANNEX_A && !can_handle_dvbc_annex_a)
 		{
 			return 0;
@@ -2935,10 +2936,6 @@
 		{
 			return 0;
 		}
-		if (!can_handle_atsc && !can_handle_dvbc_annex_b)
-		{
-			return 0;
-		}
 		if (parm.system == eDVBFrontendParametersATSC::System_DVB_C_ANNEX_B && !can_handle_dvbc_annex_b)
 		{
 			return 0;
@@ -3083,7 +3080,11 @@
 
 bool eDVBFrontend::is_multistream()
 {
+#if defined FE_CAN_MULTISTREAM
 	return fe_info.caps & FE_CAN_MULTISTREAM;
+#else
+	return false;
+#endif
 }
 
 std::string eDVBFrontend::getCapabilities()
@@ -3130,7 +3131,9 @@
 	if (fe_info.caps &  FE_CAN_8VSB)			ss << " FE_CAN_8VSB";
 	if (fe_info.caps &  FE_CAN_16VSB)			ss << " FE_CAN_16VSB";
 	if (fe_info.caps &  FE_HAS_EXTENDED_CAPS)		ss << " FE_HAS_EXTENDED_CAPS";
+#if defined FE_CAN_MULTISTREAM
 	if (fe_info.caps &  FE_CAN_MULTISTREAM)			ss << " FE_CAN_MULTISTREAM";
+#endif
 	if (fe_info.caps &  FE_CAN_TURBO_FEC)			ss << " FE_CAN_TURBO_FEC";
 	if (fe_info.caps &  FE_CAN_2G_MODULATION)		ss << " FE_CAN_2G_MODULATION";
 	if (fe_info.caps &  FE_NEEDS_BENDING)			ss << " FE_NEEDS_BENDING";
@@ -3161,10 +3164,14 @@
 		case SYS_ISDBT:		ss << " ISDBT"; break;
 		case SYS_UNDEFINED:	ss << " UNDEFINED"; break;
 		case SYS_DVBC_ANNEX_A:	ss << " DVBC_ANNEX_A"; break;
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 		case SYS_DVBC_ANNEX_C:	ss << " DVBC_ANNEX_C"; break;
-		case SYS_DVBT2:		ss << " DVBT2"; break;
 		case SYS_TURBO:		ss << " TURBO"; break;
 		case SYS_DTMB:		ss << " DTMB"; break;
+#else
+		case SYS_DMBTH:		ss << " DMBTH"; break;
+#endif
+		case SYS_DVBT2:		ss << " DVBT2"; break;
 		}
 	}

diff -Naur enigma2.orig/lib/dvb/frontend.h enigma2/lib/dvb/frontend.h
--- enigma2.orig/lib/dvb/frontend.h	2019-03-02 22:16:19.000000000 +0200
+++ enigma2/lib/dvb/frontend.h	2019-03-03 00:39:00.000000000 +0200
@@ -9,6 +9,10 @@
 #include <lib/dvb/idvb.h>
 #include <lib/dvb/frontendparms.h>
 
+#if DVB_API_VERSION < 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR < 6
+#define SYS_DVBC_ANNEX_A SYS_DVBC_ANNEX_AC
+#endif
+
 class eDVBFrontendParameters: public iDVBFrontendParameters
 {
 	DECLARE_REF(eDVBFrontendParameters);
diff -Naur enigma2.orig/lib/dvb/frontendparms.cpp enigma2/lib/dvb/frontendparms.cpp
--- enigma2.orig/lib/dvb/frontendparms.cpp	2017-04-18 10:35:49.971605111 +0200
+++ enigma2/lib/dvb/frontendparms.cpp	2017-04-18 10:51:35.644119189 +0200
@@ -9,6 +9,14 @@
 #include <fcntl.h>
 #include <sys/ioctl.h>
 
+#ifndef NO_STREAM_ID_FILTER
+#define NO_STREAM_ID_FILTER    (~0U)
+#endif
+
+#ifndef DTV_STREAM_ID
+#define DTV_STREAM_ID DTV_ISDBS_TS_ID
+#endif
+
 
 DEFINE_REF(eDVBFrontendStatus);
 
diff -Naur enigma2.orig/lib/dvb/frontendparms.h enigma2/lib/dvb/frontendparms.h
--- enigma2.orig/lib/dvb/frontendparms.h	2019-03-02 22:16:19.000000000 +0200
+++ enigma2/lib/dvb/frontendparms.h	2019-03-03 00:40:40.000000000 +0200
@@ -14,6 +14,14 @@
 
 #include <linux/dvb/frontend.h>
 
+#ifndef NO_STREAM_ID_FILTER
+#define NO_STREAM_ID_FILTER    (~0U)
+#endif
+
+#ifndef DTV_STREAM_ID
+#define DTV_STREAM_ID DTV_ISDBS_TS_ID
+#endif
+
 class eDVBFrontendParametersSatellite
 {
 public:
diff -Naur enigma2.orig/lib/gdi/fblcd.cpp enigma2/lib/gdi/fblcd.cpp
--- enigma2.orig/lib/gdi/fblcd.cpp	2019-03-02 22:16:19.000000000 +0200
+++ enigma2/lib/gdi/fblcd.cpp	2019-03-03 00:43:26.000000000 +0200
@@ -11,6 +11,10 @@
 #define PNG_SKIP_SETJMP_CHECK
 #include <png.h>
 
+#ifndef FBIO_WAITFORVSYNC
+#define FBIO_WAITFORVSYNC _IOW('F', 0x20, uint32_t)
+#endif
+
 #ifndef FBIO_BLIT
 #define FBIO_SET_MANUAL_BLIT _IOW('F', 0x21, __u8)
 #define FBIO_BLIT 0x22
--- enigma2.orig/lib/dvb/fastscan.cpp	2019-03-02 22:16:19.000000000 +0200
+++ enigma2/lib/dvb/fastscan.cpp	2019-03-03 00:44:55.000000000 +0200
@@ -11,6 +11,10 @@
 #include <lib/base/estring.h>
 #include <lib/base/nconfig.h>
 
+#ifndef NO_STREAM_ID_FILTER
+#define NO_STREAM_ID_FILTER    (~0U)
+#endif
+
 FastScanLogicalChannel::FastScanLogicalChannel(const uint8_t *const buffer)
 {
 	serviceId = UINT16(&buffer[0]);
--- enigma2.orig/lib/python/Components/InputDevice.py	2017-04-18 10:35:49.968605192 +0200
+++ enigma2/lib/python/Components/InputDevice.py	2017-04-18 10:50:52.437282617 +0200
@@ -5,11 +5,11 @@
 import struct
 import platform
 
-# include/uapi/asm-generic/ioctl.h
+# asm-generic/ioctl.h
 IOC_NRBITS = 8L
 IOC_TYPEBITS = 8L
-IOC_SIZEBITS = 13L if "mips" in platform.machine() else 14L
-IOC_DIRBITS = 3L if "mips" in platform.machine() else 2L
+IOC_SIZEBITS = 13L
+IOC_DIRBITS = 3L
 
 IOC_NRSHIFT = 0L
 IOC_TYPESHIFT = IOC_NRSHIFT+IOC_NRBITS
